apply plugin: 'java'
apply plugin: 'eclipse'

sourceCompatibility = JavaVersion.VERSION_1_6
targetCompatibility = JavaVersion.VERSION_1_6

eclipse {
  classpath {
    downloadSources = true
    downloadJavadoc = true
  }
}

dependencies {
  compile      project(':denominator-core')
  compile      project(':providers:denominator-dynect')
  compile      project(':providers:denominator-ultradns')
  compile      project(':providers:denominator-route53')
  compile      project(':providers:denominator-clouddns')
  // to quiet error messages, not as we are using it
  compile     'org.slf4j:slf4j-jdk14:1.7.5'
  compile     'io.airlift:airline:0.5'
}

// create a self-contained jar that is executable
// the output is both a 'fat' project artifact and
// a convenience file named "build/denominator"
task fatJar(dependsOn: classes, type: Jar) { 
  classifier 'fat'

  // merge provider files together
  // http://java.dzone.com/articles/jar-deps-dont-meta
  def providerFile = "META-INF/services/denominator.Provider"

  def mergeDir = "${buildDir}/merge"

  doFirst {
    // Delay evaluation until the compile configuration is ready
    from {
      configurations.compile.collect { zipTree(it).matching { exclude "**/${providerFile}" } }
    }
  }

  doFirst {
    new File(mergeDir).delete()
    def mergedFile = new File(mergeDir, providerFile)
    new File(mergedFile.parent).mkdirs()

    def depProjects = configurations.runtime.allDependencies.withType(ProjectDependency)*.dependencyProject
    depProjects.collect { it.sourceSets.main.resources }*.matching { include "**/${providerFile}" }*.each { 
        mergedFile << it.bytes
    }

    from(mergeDir)  

  }

  from (sourceSets*.output.classesDir) {
    exclude providerFile
  }


  // really executable jar
  // http://skife.org/java/unix/2011/06/20/really_executable_jars.html

  manifest {
    attributes 'Main-Class': 'denominator.cli.Denominator'
    attributes("Implementation-Title": "Denominator", "Specification-Version": version, "Implementation-Version": version)
  }


  // for convenience, we make a file in the build dir named denominator with no extension
  doLast {
    def srcFile = new File("${buildDir}/libs/${archiveName}")
    def shortcutFile = new File("${buildDir}/denominator")
    shortcutFile.delete()
    shortcutFile << "#!/usr/bin/env sh\n"
    shortcutFile << 'exec java -jar $0 "$@"' + "\n"
    shortcutFile << srcFile.bytes
    shortcutFile.setExecutable(true, true)
    srcFile.delete()
    srcFile << shortcutFile.bytes   
    srcFile.setExecutable(true, true)
  }
}

artifacts {
  archives fatJar
}
